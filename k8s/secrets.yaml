apiVersion: v1
kind: Secret
metadata:
  name: agentic-secrets
  namespace: agentic-e2e-tester
  labels:
    app.kubernetes.io/name: agentic-e2e-tester
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  postgres-username: YWdlbnRpY191c2Vy  # agentic_user
  postgres-password: cGFzc3dvcmQxMjM=    # password123
  couchbase-username: YWRtaW4=           # admin
  couchbase-password: cGFzc3dvcmQxMjM=   # password123
  redis-password: cmVkaXNwYXNzd29yZA==   # redispassword
  api-key: YWdlbnRpYy1hcGkta2V5LTEyMw== # agentic-api-key-123
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: agentic-e2e-tester
  labels:
    app.kubernetes.io/name: agentic-e2e-tester
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # Replace with your actual TLS certificate and key
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...
---
# Service account for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agentic-service-account
  namespace: agentic-e2e-tester
  labels:
    app.kubernetes.io/name: agentic-e2e-tester
    app.kubernetes.io/component: serviceaccount
automountServiceAccountToken: true
---
# Role for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: agentic-role
  namespace: agentic-e2e-tester
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
# Role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: agentic-role-binding
  namespace: agentic-e2e-tester
subjects:
- kind: ServiceAccount
  name: agentic-service-account
  namespace: agentic-e2e-tester
roleRef:
  kind: Role
  name: agentic-role
  apiGroup: rbac.authorization.k8s.io